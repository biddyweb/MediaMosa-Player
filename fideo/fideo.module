<?php
// $Id: fideo.module 109 2011-06-07 14:39:55Z thijs $

/**
 * @file
 * Module functionality for the fideo player and demo content.
 *
 * This module is currently for demonstration purposes only, it will be cleaned
 * up to become a middleware module between MediaMosa and the player in Drupal.
 *
 * @author One Shoe
 */

/**
 * Implements hook_menu().
 */
function fideo_menu() {
  $items['fideo'] = array(
    'title' => 'Fideo Testpage',
    'page callback' => 'fideo_testpage',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Demo structure for Drupal to Fideo conversion.
 */
function fideo_format() {
  $media = array(
    'primary' => array(
      '#type' => 'video',
      '#id' => 'fideo-primary',
      '#duration' => 1140,
      '#attributes' => array(
        'width' => 534,
        'height' => 400,
        'controls' => 'controls',
      ),
      '#poster' => base_path() .'assets/video/mozcamp_still.jpg',
      array(
        '#type' => 'source',
        '#mimetype' => 'video/mp4',
        '#codecs' => 'avc1.42E01E, mp4a.40.2',
        '#file' => base_path() .'assets/video/mozcamp.handbrake.mp4?1',
      ),
      'webm' => array(
        '#type' => 'source',
        '#mimetype' => 'video/webm',
        '#codecs' => 'vp8, vorbis',
        '#file' => base_path() .'assets/video/mozcamp.ffmpeg.webm?1',
      ),
      'ogv' => array(
        '#type' => 'source',
        '#mimetype' => 'video/ogg',
        '#codecs' => 'theora, vorbis',
        '#file' => base_path() .'assets/video/mozcamp.ffmpeg.ogv?1',
      ),
      array(
        '#type' => 'subtitles',
        '#lang' => 'nl',
        '#title' => t('Dutch'),
        '#file' => base_path() .'assets/video/mozcamp.captions.srt',
      ),
    ),
    'secondary' => array(
      '#type' => 'video',
      '#disabled' => TRUE,
      '#multistream' => 'fideo-primary',
      '#attributes' => array(
        'width' => 267, 'height' => 200, 'controls' => 'controls',
      ),
      '#poster' => base_path() .'assets/video/mozcamp_slide.jpg',
      array(
        '#type' => 'source',
        '#mimetype' => 'video/mp4',
        '#codecs' => 'avc1.42E01E, mp4a.40.2',
        '#file' => base_path() .'assets/video/mozcamp.handbrake.mp4?2',
      ),
      'webm' => array(
        '#type' => 'source',
        '#mimetype' => 'video/webm',
        '#codecs' => 'vp8, vorbis',
        '#file' => base_path() .'assets/video/mozcamp.ffmpeg.webm?2',
      ),
      'ogv' => array(
        '#type' => 'source',
        '#mimetype' => 'video/ogg',
        '#codecs' => 'theora, vorbis',
        '#file' => base_path() .'assets/video/mozcamp.ffmpeg.ogv?2',
      ),
    ),
    'slides' => array(
      '#type' => 'slides',
      '#target' => 'fideo-primary',
    ),
    'markers' => array(
      '#type' => 'markers',
      '#target' => 'fideo-primary',
    ),
  );

  $timecodes = array(2.031, 4.661, 8.75, 10.874, 12.945, 30.112, 73.847, 204.292, 483.464, 486.061, 487.62, 490.251, 492.863, 495.463, 498.076, 499.141, 500.688, 504.856, 508.48, 509.54, 512.214, 514.823, 515.875, 630.102, 639.983, 692.459);
  $alts = array(
    'MozCamp.odp - OpenOffice.org Impress',
    'MozCamp.odp - OpenOffice.org Impress',
    'MozCamp.odp - OpenOffice.org Impress
mozilla europe
"The Dutch Mozilla Community Exposed"
Wim Benes',
    'mozilla europe
"The Dutch Mozilla Community Exposed"
Wim Benes',
    'mozilla europe
"The Dutch Mozilla Community Exposed"
Wim Benes',
    'mozilla europe
"The Dutch Mozilla Community Exposed"
Wim Benes',
    'mozilla europe
Fryslan
Nederland
Europe
Planet',
    'mozilla europe
NETSCAPE.
NAVIGATOR',
    'MozCamp.odp - OpenOffice.org Impress
mozilla europe',
    'Live-Uitzending Auditorium SURFnet - Mozilla Firefox
Live
Uitzending Auditorium SURFnet',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    'mozilla europe
NETSCAPE.
NAVIGATOR',
    'mozilla
Krij Firefox 3 yn it Frysk',
    'mozilla messaging
Download Thunderbird 3 Beta 2',
    'mozilla europe
www.mozilla-nl.org
www.mozbrowser.nl
www.mozilla-europe.org',
  );

  for ($i = 0; $i < count($timecodes); $i++) {
    $media['slides'][$i] = array(
      '#type' => 'slide',
      '#start' => $timecodes[$i],
      '#file' => base_path() .'assets/stills/'. str_pad($i, 3, '0', STR_PAD_LEFT) .'.jpg',
      '#alt' => $alts[$i],
    );
  }

  $media['markers'][$i++] = array(
    '#type' => 'marker',
    '#start' => 3.3,
    '#end' => 6.4,
    '#value' => 'Introduction',
  );

  $media['markers'][$i++] = array(
    '#type' => 'marker',
    '#start' => 110.3,
    '#end' => 156.4,
    '#value' => 'Mozilla Firefox Frysian translation team',
  );
  $media['markers'][$i++] = array(
    '#type' => 'marker',
    '#start' => 1110.3,
    '#end' => 1100.4,
    '#value' => 'Time for questions',
  );
  $media['markers'][$i++] = array(
   '#type' => 'marker',
   '#start' => 400.3,
   '#end' => 410.4,
   '#value' => 'History: from Netscape, to Mozilla, to Firefox',
  );
  $media['markers'][$i++] = array(
    '#type' => 'marker',
    '#start' => 600.3,
    '#end' => 650.4,
    '#value' => '<img src="'. base_path() .'assets/stills/firefox_logo.png" width="100" height="100" alt="FireFox" /><br />The FireFox browser.',
  );

  //Create a wrapper
  $media['#prefix'] = '<div id="fideo"><div class="fideo-wrapper">';
  $media['#suffix'] = '</div></div>';

  return $media;
}

function fideo_testpage() {
  $media = fideo_format();
  $render = fideo_render($media);

  return $render;
}

function _fideo_prepare_object(&$elements) {

}

function fideo_render(&$elements) {
  if (!empty($elements['#type']) && ($info = _fideo_element_info($elements['#type']))) {
    $elements += $info;
  }

  // Make any final changes to the element before it is rendered. This means
  // that the $element or the children can be altered or corrected before the
  // element is rendered into the final text.
  if (isset($elements['#pre_render'])) {
    foreach ($elements['#pre_render'] as $function) {
      if (function_exists($function)) {
        $elements = $function($elements);
      }
    }
  }

  $content = '';
  if (!isset($elements['#sorted'])) {
    //uasort($elements, "element_sort");
  }

  if (!isset($elements['#children'])) {
    $children = element_children($elements);
    // Render all the children that use a theme function.
    if (isset($elements['#theme']) && empty($elements['#theme_used'])) {
      $elements['#theme_used'] = TRUE;

      $previous = array();
      foreach (array('#value', '#type', '#prefix', '#suffix') as $key) {
        $previous[$key] = isset($elements[$key]) ? $elements[$key] : NULL;
      }
      // If we rendered a single element, then we will skip the renderer.
      if (empty($children)) {
        $elements['#printed'] = TRUE;
      }
      else {
        $elements['#value'] = '';
      }
      $elements['#type'] = 'markup';

      unset($elements['#prefix'], $elements['#suffix']);
      $content = theme($elements['#theme'], $elements);

      foreach (array('#value', '#type', '#prefix', '#suffix') as $key) {
        $elements[$key] = isset($previous[$key]) ? $previous[$key] : NULL;
      }
    }
    // Render each of the children using drupal_render and concatenate them.
    if (!isset($content) || $content === '') {
      foreach ($children as $key) {
        $content .= fideo_render($elements[$key]);
      }
    }
  }

  if (isset($content) && $content !== '') {
    $elements['#children'] = $content;
  }

  // Until now, we rendered the children, here we render the element itself
  if (!isset($elements['#printed'])) {
    $content = theme(!empty($elements['#renderer']) ? $elements['#renderer'] : (!empty($elements['#type']) ? 'fideo_'. $elements['#type'] : 'markup'), $elements);
    $elements['#printed'] = TRUE;
  }

  if (isset($content) && $content !== '') {
    // Filter the outputted content and make any last changes before the
    // content is sent to the browser. The changes are made on $content
    // which allows the output'ed text to be filtered.
    if (isset($elements['#post_render'])) {
      foreach ($elements['#post_render'] as $function) {
        if (function_exists($function)) {
          $content = $function($content, $elements);
        }
      }
    }
    $prefix = isset($elements['#prefix']) ? $elements['#prefix'] : '';
    $suffix = isset($elements['#suffix']) ? $elements['#suffix'] : '';
    return $prefix . $content . $suffix;
  }
}

/**
 * Provides element information.
 */
function _fideo_element_info($type) {
  static $cache;

  $basic_defaults = array(
    '#attributes' => array(),
    '#tree' => FALSE,
    '#parents' => array(),
  );

  if (!isset($cache)) {
    $cache = array();
    foreach (module_implements('fideo_elements') as $module) {
      $elements = module_invoke($module, 'fideo_elements');
      if (isset($elements) && is_array($elements)) {
        $cache = array_merge_recursive($cache, $elements);
      }
    }
    if (sizeof($cache)) {
      foreach ($cache as $element_type => $info) {
        $cache[$element_type] = array_merge_recursive($basic_defaults, $info);
      }
    }
  }

  return $cache[$type];
}

/**
 * Implements hook_fideo_elements().
 */
function fideo_fideo_elements() {
  $types = array();

  $types['video'] = array(
    '#poster' => '',
    '#autoplay' => FALSE,
    '#controls' => TRUE,
    '#preload' => FALSE,
    '#attributes' => array(),
    '#value' => NULL,
    '#prefix' => '',
    '#suffix' => '',
    '#tree' => TRUE,
  );

  $types['source'] = array(
    '#mimetype' => '',
    '#attributes' => array(),
    '#file' => '',
  );

  $types['track'] = $types['subtitles'] = $types['descriptions'] = $types['chapters'] = $types['metadata'] = array(
    '#mimetype' => 'text/plain',
    '#file' => '',
    '#renderer' => 'fideo_track',
    '#lang' => 'en',
    '#title' => '',
    '#attributes' => array(),
  );

  $types['slides'] = array(
    '#target' => '',
    '#attributes' => array(),
    '#transition' => '',
    '#prefix' => '',
    '#suffix' => '',
    '#value' => NULL,
  );

  $types['slide'] = array(
    '#attributes' => array(),
    '#file' => '',
    '#start' => NULL,
    '#alt' => '',
  );

  $types['markers'] = array(
    '#attributes' => array(),
    '#file' => '',
    '#value' => NULL,
  );

  $types['marker'] = array(
    '#attributes' => array(),
    '#start' => NULL,
    '#end' => NULL,
  );

  $types['markup'] = array(
    '#prefix' => '',
    '#suffix' => '',
  );

  return $types;
}

/**
 * Implements hook_elements().
 */
function fideo_elements() {
  return fideo_fideo_elements();
}

/**
 * Implements hook_theme().
 */
function fideo_theme() {
  $theme = array();
  foreach (array('video', 'track', 'source', 'fallback', 'slide', 'slides', 'markup', 'markers', 'marker') as $el) {
    $theme['fideo_'. $el] = array(
      'arguments' => array('element' => array()),
      'file' => 'fideo.theme.inc',
    );
  }
  return $theme;
}

/**
 * Pre-render function for video tag.
 */
function _fideo_pre_render_video($element) {
  if (!empty($element['sources'])) {
    foreach (element_children($element['sources']) as $key) {
      $element['sources'][$key] += array(
        '#type' => 'source',
      );
    }
  }
  if (!empty($element['tracks'])) {
    foreach (element_children($element['tracks']) as $key) {
      $element['tracks'][$key] += array(
        '#type' => 'track',
      );
    }
  }

  return $element;
}

/**
 * Helper function for finding an element based on type and a specific
 * attribute.
 */
function _fideo_element_by_type($element, $type, $attr_name = NULL, $attr_value = NULL) {
  $keys = array();
  $is_array = is_array($type);
  foreach (element_children($element) as $key) {
    if ((($is_array && in_array($element[$key]['#type'], $type)) || (!$is_array && $element[$key]['#type'] == $type)) && (($attr_name && isset($element[$key][$attr_name]) && $element[$key][$attr_name] == $attr_value) || !$attr_name)) {
      $keys[] = $key;
    }
  }
  return $keys;
}
