<?php
// $Id: fideo.module 286 2011-12-13 12:55:28Z thijs $

/**
 * @file
 * Module functionality for the fideo player and demo content.
 *
 * This module is currently for demonstration purposes only, it will be cleaned
 * up to become a middleware module between MediaMosa and the player in Drupal.
 *
 * @author One Shoe
 *
 * @todo Make a function that excepts HH:mm:ss.ms, HH:mm:ss or mm:ss input and
 *   returns the timecode in seconds as float.
 * @todo Make a function that excepts (float) seconds and returns format like
 *   12.5s (see
 *   http://www.w3.org/2008/WebVideo/Fragments/WD-media-fragments-spec/#naming-time)
 * @todo Implement hook_library() for some of the used plugins perhaps?
 */

/**
 * Define constants stating default values for third-party plugins.
 */

define('FIDEO_DEFAULT_FLOWPLAYER_SRC', '/assets/flowplayer/flowplayer-3.2.5.swf');
define('FIDEO_DEFAULT_QTIP_SRC', '/assets/qtip/jquery.qtip-1.0.0-rc3.min.js');

/**
 * Implements hook_permission().
 * @link http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_permission/7
 *
 * @return array
 */
function fideo_permission() {
  return array(
    'administer fideo' => array(
      'title' => t('Administer Fideo'),
      'description' => t('Configure the Fideo module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 * @link http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_menu/6
 *
 * @return array
 */
function fideo_menu() {
  $items = array();

  $items['fideo'] = array(
    'title' => 'HTML5 weblectures player',
    'file' => 'fideo.demo.inc',
    'page callback' => 'fideo_testpage',
    'access arguments' => array('access content'),
  );

  // Admin page to configure the Fideo module.
  $items['admin/config/media/fideo'] = array(
    'title' => 'Fideo configuration',
    'description' => 'Configure the Fideo module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fideo_configuration_form'),
    'file' => 'fideo.admin.inc',
    'access arguments' => array('administer fideo'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function fideo_theme() {
  $theme = array();
  foreach (array('video', 'track', 'source', 'fallback', 'slide', 'slides', 'markup', 'markers', 'marker') as $el) {
    $theme['fideo_'. $el] = array(
      'variables' => array('element' => array()),
      'file' => 'fideo.theme.inc',
    );
  }
  return $theme;
}

/**
 * Main render function. Accepts array in similar to form definition, see
 * fideo_demo_format() for an example.
 *
 * @param array $elements
 */
function fideo_render(&$elements) {
  // Include the render.inc file.
  module_load_include('inc', 'fideo', 'fideo.render');

  // Call the helper function from the render.inc file.
  return _fideo_render($elements);
}

/**
 * Implements hook_fideo_elements().
 *
 * @return array
 */
function fideo_fideo_elements() {
  $types = array();

  $types['video'] = array(
    '#poster' => '',
    '#autoplay' => FALSE,
    '#controls' => TRUE,
    '#preload' => 'metadata',

    // Whether or not to use the Flash fallback player in output.
    '#flash_fallback' => TRUE,

    // Provide TRUE if you want to avoid Fideo adding Javascript and CSS assets.
    '#skip_assets' => FALSE,

    '#attributes' => array(),
    '#pre_render' => array('_fideo_pre_render_video'),

    '#value' => NULL,
    '#prefix' => '',
    '#suffix' => '',
    '#tree' => TRUE,
  );

  $types['source'] = array(
    '#mimetype' => '',
    '#attributes' => array(),
    '#file' => '',
  );

  $types['track'] = $types['subtitles'] = $types['descriptions'] = $types['chapters'] = $types['metadata'] = array(
    '#mimetype' => 'text/plain',
    '#file' => '',
    '#renderer' => 'fideo_track',
    '#lang' => 'en',
    '#title' => '',
    '#attributes' => array(),
  );

  $types['slides'] = array(
    '#target' => '',
    '#attributes' => array(),
    '#transition' => '',
    '#prefix' => '',
    '#suffix' => '',
    '#value' => NULL,
  );

  $types['slide'] = array(
    '#attributes' => array(),
    '#file' => '',
    '#start' => NULL,
    '#alt' => '',
  );

  $types['markers'] = array(
    '#attributes' => array(),
    '#file' => '',
    '#value' => NULL,
  );

  $types['marker'] = array(
    '#attributes' => array(),
    '#start' => NULL,
    '#end' => NULL,
  );

  $types['markup'] = array(
    '#prefix' => '',
    '#suffix' => '',
  );

  return $types;
}

/**
 * Convert a timecode string to seconds.milliseconds. The string should be
 * provided in the format: HH:MM:SS.ms. Hours and minutes are optional, so the
 * following inputs are valid too:
 * 01:02:03.04 (1 hour, 2 minutes, 3 seconds and 40 milliseconds) = 3723.04
 * 01:02.03 (1 minute, 2 seconds and 30 milliseconds) = 62.03
 * 01.02 (1 second and 20 milliseconds) = 1.02
 * 01: (1 minute) = 60
 *
 * @param string $timecode
 *   In HH:MM:SS.ms format, MM:ss.ms, MM:ss, ss.ms or ss format.
 *
 * @return float
 *   Returns the amount of seconds as float.
 */
function fideo_timecode_to_seconds($timecode) {
  // Make sure the timecode string is not empty.
  if (drupal_strlen($timecode) < 1) {
    return FALSE;
  }

  // Create an array from the timecode, based on the : character.
  $time = explode(':', str_replace(',', '.', $timecode));
  $time_size = count($time);

  // Add a zero incase hours and or minutes are missing.
  if ($time_size > 3) {
    return FALSE;
  }
  elseif ($time_size == 2) {
    array_unshift($time, 0);
  }
  elseif ($time_size == 1) {
    array_unshift($time, 0, 0);
  }

  // Convert the hours and minutes to seconds.
  $minutes = (floatval($time[0]) * 60) + floatval($time[1]);
  $seconds = $minutes * 60 + floatval($time[2]);

  return $seconds;
}
